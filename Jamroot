# Copyright (c) 2013-2014 Matthias Noack (ma.noack.pr@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import os ;

path-constant BOOST_PATH : [ os.environ BOOST_ROOT ] ;
path-constant BOOST_PATH_MIC : [ os.environ MIC_BOOST_ROOT ] ;

path-constant INC : ./include ;
path-constant SRC : ./src ;

rule get-boost-lib-path ( properties * )
{
	if <variant>release_mic in $(properties) || <variant>debug_mic in $(properties)
	{
		return <search>$(BOOST_PATH_MIC)/lib ;
	}
	else
	{
		return <search>$(BOOST_PATH)/lib ;
	}
}

lib boost_program_options : : <name>boost_program_options <conditional>@get-boost-lib-path ;
lib scif : : <name>scif ;

project HAM
	: source-location $(SRC)
	: requirements
	<include>$(INC)
	<include>$(BOOST_PATH)/include
	<variant>debug:<define>HAM_DEBUG_ON
	<variant>debug_mic:<define>HAM_DEBUG_ON 
#	<toolset>intel:<cflags>"-static-intel"
	<inlining>on # off, on, full
	#<optimization>speed # off, speed, space
	<cxxflags>"-std=c++11"
	<threading>multi
#	<link>static
	: default-build debug release debug_mic release_mic
	;

# Object files that are compiled the same for all targets

obj cpu_affinity_obj : ham/util/cpu_affinity.cpp ;
constant OBJ_FILES_COMMON : cpu_affinity_obj ;

# Object files from the same sources that need to be compiled differently for different targets

obj communicator_obj_mpi : ham/net/communicator.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
obj communicator_mpi_obj_mpi : ham/net/communicator_mpi.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
obj runtime_obj_mpi : ham/offload/runtime.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
obj offload_obj_mpi : ham/offload/offload.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;

constant OBJ_FILES_MPI : communicator_obj_mpi runtime_obj_mpi offload_obj_mpi communicator_mpi_obj_mpi ;

obj communicator_obj_scif : ham/net/communicator.cpp : <library>scif <define>HAM_COMM_SCIF ;
obj communicator_scif_obj_scif : ham/net/communicator_scif.cpp : <library>scif <define>HAM_COMM_SCIF ;
obj runtime_obj_scif : ham/offload/runtime.cpp : <library>scif <define>HAM_COMM_SCIF ;
obj offload_obj_scif : ham/offload/offload.cpp : <library>scif <define>HAM_COMM_SCIF ;

constant OBJ_FILES_SCIF : communicator_obj_scif runtime_obj_scif offload_obj_scif communicator_scif_obj_scif ;

# Libraries

obj main_obj_mpi : ham/offload/main.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
obj main_obj_scif : ham/offload/main.cpp : <library>scif <define>HAM_COMM_SCIF ;

lib ham_offload_mpi
	: $(OBJ_FILES_COMMON) $(OBJ_FILES_MPI) main_obj_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
	;

lib ham_offload_scif
	: $(OBJ_FILES_COMMON) $(OBJ_FILES_SCIF) main_obj_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF
	;

obj main_explicit_obj_mpi : ham/offload/main_explicit.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
obj main_explicit_obj_scif : ham/offload/main_explicit.cpp : <library>scif <define>HAM_COMM_SCIF ;

lib ham_offload_mpi_explicit
	: $(OBJ_FILES_COMMON) $(OBJ_FILES_MPI) main_explicit_obj_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI <define>HAM_EXPLICIT
	;

lib ham_offload_scif_explicit
	: $(OBJ_FILES_COMMON) $(OBJ_FILES_SCIF) main_explicit_obj_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF <define>HAM_EXPLICIT
	;

# Benchmarks

obj benchmark_ham_offload_mpi_obj : benchmark_ham_offload.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ;
exe benchmark_ham_offload_mpi
	: benchmark_ham_offload_mpi_obj boost_program_options
	: <library>/mpi//mpi <library>ham_offload_mpi
	;	

obj benchmark_ham_offload_scif_obj : benchmark_ham_offload.cpp : <library>scif <define>HAM_COMM_SCIF ;
exe benchmark_ham_offload_scif
	: benchmark_ham_offload_scif_obj boost_program_options ham_offload_scif
	: <library>scif 
	;	

exe benchmark_intel_leo
	: benchmark_intel_leo.cpp boost_program_options
	: <define>BOOST_NO_EXCEPTIONS
	;

# Examples/Tests

exe active_msgs
	: active_msgs.cpp
	;

exe ham_offload
	: ham_offload.cpp ham_offload_scif boost_program_options
#	: <library>/mpi//mpi <define>HAM_COMM_MPI
	: <library>scif <define>HAM_COMM_SCIF
	;

exe ham_offload_explicit
	: ham_offload_explicit.cpp ham_offload_mpi_explicit boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
#	: <library>scif <define>HAM_COMM_SCIF
	;

exe inner_product_scif
	: [ obj inner_product_obj : inner_product.cpp : <library>scif <define>HAM_COMM_SCIF ] ham_offload_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF
	;

exe inner_product_mpi
	: [ obj inner_product_obj : inner_product.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ] ham_offload_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
	;

#
exe test_data_transfer_scif
	: [ obj test_data_transfer_obj : test_data_transfer.cpp : <library>scif <define>HAM_COMM_SCIF ] ham_offload_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF
	;

exe test_data_transfer_mpi
	: [ obj test_data_transfer_obj : test_data_transfer.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ] ham_offload_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
	;


exe test_argument_transfer_scif
	: [ obj test_argument_transfer_obj : test_argument_transfer.cpp : <library>scif <define>HAM_COMM_SCIF ] ham_offload_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF
	;

exe test_argument_transfer_mpi
	: [ obj test_argument_transfer_obj : test_argument_transfer.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ] ham_offload_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
	;


exe test_polymorphism_scif
	: [ obj test_polymorphism_obj : test_polymorphism.cpp : <library>scif <define>HAM_COMM_SCIF ] ham_offload_scif boost_program_options
	: <library>scif <define>HAM_COMM_SCIF
	;

exe test_polymorphism_mpi
	: [ obj test_polymorphism_obj : test_polymorphism.cpp : <library>/mpi//mpi <define>HAM_COMM_MPI ] ham_offload_mpi boost_program_options
	: <library>/mpi//mpi <define>HAM_COMM_MPI
	;


# Explicit targets (not built by default)
explicit benchmark_intel_leo ;
explicit test_data_transfer_scif ;
